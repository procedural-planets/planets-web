import{S as ae,i as se,s as ie,k as y,q as $,a as b,l as v,m as w,r as z,h as f,c as T,n as h,b as X,G as n,u as B,H as C,J as te,y as N,z as S,A as q,g as D,d as O,B as F}from"../chunks/index.fe361f2c.js";function ne(c){let e,a,d,g,m,o,r=c[3].text+"",_;return{c(){e=y("div"),a=y("img"),m=b(),o=y("p"),_=$(r),this.h()},l(t){e=v(t,"DIV",{class:!0});var s=w(e);a=v(s,"IMG",{src:!0,alt:!0,class:!0}),m=T(s),o=v(s,"P",{class:!0});var i=w(o);_=z(i,r),i.forEach(f),s.forEach(f),this.h()},h(){te(a.src,d=c[3].src)||h(a,"src",d),h(a,"alt",g=c[3].desc),h(a,"class","svelte-1wlz5kv"),h(o,"class","svelte-1wlz5kv"),h(e,"class","image svelte-1wlz5kv")},m(t,s){X(t,e,s),n(e,a),n(e,m),n(e,o),n(o,_)},p(t,s){s&8&&!te(a.src,d=t[3].src)&&h(a,"src",d),s&8&&g!==(g=t[3].desc)&&h(a,"alt",g),s&8&&r!==(r=t[3].text+"")&&B(_,r)},d(t){t&&f(e)}}}function re(c){let e,a,d,g,m,o,r,_,t,s,i=c[3]!=null&&ne(c);return{c(){e=y("div"),a=y("h2"),d=$(c[0]),g=b(),m=y("p"),o=$(c[2]),r=b(),i&&i.c(),_=b(),t=y("p"),s=$(c[1]),this.h()},l(l){e=v(l,"DIV",{class:!0});var u=w(e);a=v(u,"H2",{});var k=w(a);d=z(k,c[0]),k.forEach(f),g=T(u),m=v(u,"P",{class:!0});var H=w(m);o=z(H,c[2]),H.forEach(f),r=T(u),i&&i.l(u),_=T(u),t=v(u,"P",{class:!0});var W=w(t);s=z(W,c[1]),W.forEach(f),u.forEach(f),this.h()},h(){h(m,"class","date svelte-1wlz5kv"),h(t,"class","svelte-1wlz5kv"),h(e,"class","journal-entry svelte-1wlz5kv")},m(l,u){X(l,e,u),n(e,a),n(a,d),n(e,g),n(e,m),n(m,o),n(e,r),i&&i.m(e,null),n(e,_),n(e,t),n(t,s)},p(l,[u]){u&1&&B(d,l[0]),u&4&&B(o,l[2]),l[3]!=null?i?i.p(l,u):(i=ne(l),i.c(),i.m(e,_)):i&&(i.d(1),i=null),u&2&&B(s,l[1])},i:C,o:C,d(l){l&&f(e),i&&i.d()}}}function oe(c,e,a){let{entry_title:d}=e,{entry_text:g}=e,{entry_date:m}=e,{entry_image:o}=e;return c.$$set=r=>{"entry_title"in r&&a(0,d=r.entry_title),"entry_text"in r&&a(1,g=r.entry_text),"entry_date"in r&&a(2,m=r.entry_date),"entry_image"in r&&a(3,o=r.entry_image)},[d,g,m,o]}class G extends ae{constructor(e){super(),se(this,e,oe,re,ie,{entry_title:0,entry_text:1,entry_date:2,entry_image:3})}}function le(c){let e,a,d,g,m,o,r,_,t,s,i,l,u,k,H,W,L,A,K,I,j,U,P,J,M;return s=new G({props:{entry_title:"Implementing Worley Noise (Part 2)",entry_date:"2023-05-19",entry_image:{src:"worley.png",id:"6",text:"Procedurally generated planet using Worley Noise.",desc:"Procedurally generated planet using Worley Noise."},entry_text:`Last minute we managed to get the Worley Noise working! When creating the Worley Noise filter we created a number of seed points. We added a parameter to control the number of seed points. When evaluating a point, we looped through these seed points and calculated the distance from that point to the closest seed point which was returned as the noise value.

        This will be our final entry. Bye :)
        `}}),l=new G({props:{entry_title:"Implementing Worley Noise (Part 1)",entry_date:"2023-05-17",entry_image:{src:"5.png",id:"5",text:"First try at implementing Worley noise. Bottom left corner shows an image of what Worley noise is supposed to look like.",desc:"Procedurally generated planet"},entry_text:`Worley noise is probably the last thing anyone would associate with planetary surfaces. But in our space, everything is possible.

        When creating Worley noise, a few seed points are randomly picked/generated before calculating the distance from every other point to the closest seed point. The noise value for each point corresponds to the distance to the closest seed point. There are different flavours of Worley noise where it does not necessarily have to be the closest seed point.

        Trying to implement this algorithm did not got very well as can be seen in the image. This might be more difficult that what we initially thought.

        To be continued.
        `}}),k=new G({props:{entry_title:"Planet X?",entry_date:"2023-05-16",entry_image:{src:"3.png",id:"3",text:"Procedurally generated planet with a simple shader.",desc:"Procedurally generated planet"},entry_text:`Ahh, an exquisite piece of planetary marvel! Since last time, we have implemented a new type of noise filter and added a simple shader to our planet. 
        
        Mountains in the real world are seldom cone shaped. More often, they are ridge shaped! The new noise filter type is creating this feature by taking the absolute value and inverting the original simplex noise. To make the ridges more distinct, the resulting value is squared. The code was modified to support multiple types of noise filters. This opens up to the possibility of easily adding additional noise filters in the future.

        Next up: shader. We wanted to colour our planet based on the elevation. The first step was finding the highest and lowest point on our planet. The minimum and maximum elevation can be set at the same time that we are evaluating the elevation of each point on our sphere by checking if the elevation of a point is smaller than the minimum or larger than the maxium. The next step is creating the shader. This is easy to do in Unity. The elevation of a pixel on the planet is converted to a value between zero and one based on where it lies between the minimum and maxiumum elevation. The next step was mapping a gradient to these values and boom! Earth 2.0. As we can see in the image, the ocean, which has the lowest elevation, is coloured blue while land is green and mountain tops are snow white.
        
        Up to this point, we have followed Sebastian Lague's tutorial on procedural planets. We have learned a lot about how to use noise to procedurally generate planets. Furthermore, we have gained a lot of experience in working with Unity, which we all had limited experience with before this project. Our next step will be to add another noise filter.
        `}}),W=new G({props:{entry_title:"Make Some Noise!",entry_date:"2023-05-14",entry_image:{src:"2.png",id:"2",text:"Procedurally generated planet using layerd simplex noise.",desc:"Procedurally generated planet"},entry_text:`To change the shape of our sphere to make it into a planet, noise is used to determine the elevation of points on our sphere. The modified version of simplex noise by Sebastian Lague is used in our implementation. Our plan for the future is to implement different types of noise. We have not yet settled on which one, but we have mentioned Worley noise during our group meetings. At this point, we are just following along Lague's tutorial.

        Using a single layer of simplex noise alone to determine the elevation of points on our sphere basically create a blob. We have different parameters that change the characteristics of the terrain such as rougness and strength. Turning up the roughness increases the distance between points which turns the planet into a spike ball. Pretty cool. At this point we can create blobs, spike balls and kinda meteorites - but that's not really what we are here for. We want that planet shape!!

        To turn our blob into a planet the only thing we need to add is a minimum elevation value to our code. This will ensure that no points have a lower elevation than the minimum elevation. With the right settings, the points that are set to this minimum value will create the oceans on our planet and other points will create chunks of land. This can clearly be seens in the image above. We have our planet! Project finished? No.

        One blob high-lone cannot maketh a planet, but two c'rtainly can. That's right Shakespeare! One blob cannot be both farmland and mountains, it can only be one of them. To achieve an authentic look on our planet, we need to layer our noise. This only means creating multiple noise layers. When we want to calculate the elevation of a point, the output from each noise layer is added to the point's elevation.

        Mountains sticking out of the ocean is ruining the immersion. We only want mountains to appear on land! To fix this, we use one of the noise layers as a mask for the other layers. After doing this, we achieve the result in the image above! Done and dusted for this time!
        `}}),A=new G({props:{entry_title:"A Sphere Is Born",entry_date:"2023-05-12",entry_image:{src:"1.png",id:"1",text:"A basic sphere. Note the lines indicating different surface normals.",desc:"sphere"},entry_text:`The first thing that God did when he created the universe was to create spheres. Without spheres, no planets. Without planets, no Earth. Without Earth, no humans. Without humans, no DGI course.

        The first step for us and this project is the same. We want to create a solar system with procedurally generated planets. To create these planets, we need spheres! We base our planets on Sebastian Lague's technique for creating spheres. His YouTube series about the topic has inspried this project and will be used to create a basic planet.

        This technique uses a cube to create a sphere since the size of triangles are the same, resulting in an even distribution of detail. Furthermore, the number of triangles are increased at a reasonable rate when the level of detail is increased. One issue with this technique is that, since the sphere is created from the sides of a cube, surface normals do not match up. This can be seen in the image above. It will however be fixed later in this project.
        
        `}}),{c(){e=y("main"),a=y("div"),d=y("h1"),g=$("Procedural Planets"),m=b(),o=y("p"),r=$("by Albin Kempe, André Fredriksen & Vilhelm Hellmér"),_=b(),t=y("div"),N(s.$$.fragment),i=b(),N(l.$$.fragment),u=b(),N(k.$$.fragment),H=b(),N(W.$$.fragment),L=b(),N(A.$$.fragment),K=b(),I=y("footer"),j=y("p"),U=$("KTH DH2323 - "),P=y("a"),J=$("GitHub Repository"),this.h()},l(p){e=v(p,"MAIN",{class:!0});var E=w(e);a=v(E,"DIV",{class:!0});var V=w(a);d=v(V,"H1",{});var Y=w(d);g=z(Y,"Procedural Planets"),Y.forEach(f),m=T(V),o=v(V,"P",{class:!0});var Q=w(o);r=z(Q,"by Albin Kempe, André Fredriksen & Vilhelm Hellmér"),Q.forEach(f),V.forEach(f),_=T(E),t=v(E,"DIV",{class:!0});var x=w(t);S(s.$$.fragment,x),i=T(x),S(l.$$.fragment,x),u=T(x),S(k.$$.fragment,x),H=T(x),S(W.$$.fragment,x),L=T(x),S(A.$$.fragment,x),x.forEach(f),K=T(E),I=v(E,"FOOTER",{class:!0});var Z=w(I);j=v(Z,"P",{class:!0});var R=w(j);U=z(R,"KTH DH2323 - "),P=v(R,"A",{href:!0,target:!0,rel:!0,class:!0});var ee=w(P);J=z(ee,"GitHub Repository"),ee.forEach(f),R.forEach(f),Z.forEach(f),E.forEach(f),this.h()},h(){h(o,"class","svelte-16lz6bm"),h(a,"class","title svelte-16lz6bm"),h(t,"class","jorunal"),h(P,"href","https://github.com/procedural-planets/planets-src"),h(P,"target","_blank"),h(P,"rel","noopener noreferrer"),h(P,"class","svelte-16lz6bm"),h(j,"class","svelte-16lz6bm"),h(I,"class","svelte-16lz6bm"),h(e,"class","svelte-16lz6bm")},m(p,E){X(p,e,E),n(e,a),n(a,d),n(d,g),n(a,m),n(a,o),n(o,r),n(e,_),n(e,t),q(s,t,null),n(t,i),q(l,t,null),n(t,u),q(k,t,null),n(t,H),q(W,t,null),n(t,L),q(A,t,null),n(e,K),n(e,I),n(I,j),n(j,U),n(j,P),n(P,J),M=!0},p:C,i(p){M||(D(s.$$.fragment,p),D(l.$$.fragment,p),D(k.$$.fragment,p),D(W.$$.fragment,p),D(A.$$.fragment,p),M=!0)},o(p){O(s.$$.fragment,p),O(l.$$.fragment,p),O(k.$$.fragment,p),O(W.$$.fragment,p),O(A.$$.fragment,p),M=!1},d(p){p&&f(e),F(s),F(l),F(k),F(W),F(A)}}}class ue extends ae{constructor(e){super(),se(this,e,null,le,ie,{})}}export{ue as component};
